思路：递归分析问题，循环实现代码。
 /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    /* Recursively */
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 == NULL)
            return l2;
        if(l2 == NULL)
            return l1;
        
        ListNode* new_head = NULL;
        if(l1->val < l2->val) {
            new_head = l1;
            new_head->next = mergeTwoLists(l1->next, l2);
        }
        else {
            new_head = l2;
            new_head->next = mergeTwoLists(l1, l2->next);
        }
        
        return new_head;
    }
    
    /* Iteratively */
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 == NULL)
            return l2;
        if(l2 == NULL)
            return l1;
        
        ListNode* node1 = l1;
        ListNode* node2 = l2;
        ListNode* new_head = NULL;
        if(node1->val < node2->val) {
             new_head = node1;
             node1 = node1->next;
        }
        else {
            new_head = node2;
            node2 = node2->next;
        }
        
        ListNode* new_node = new_head;
        while(node1 != NULL && node2 != NULL) {
            if(node1->val < node2->val) {
                 new_node->next = node1;
                 node1 = node1->next;
            }  
            else {
                new_node->next = node2;
                node2 = node2->next;
            }
            
            new_node = new_node->next;
        }
        
        if(node1 == NULL)
            new_node->next = node2;          
        if(node2 == NULL)
            new_node->next = node1;
 
        return new_head;
    }
};
