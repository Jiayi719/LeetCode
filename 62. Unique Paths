思路：
递归分析问题，假设从点(0,0)走到点(m-1,n-1)有f(m,n)条不同的路径，而从点(0,0)走到点(m-1,n-1)，可以先从点(0,0)走到点(m-2,n-1)再向右走一步，
或者从点(0,0)走到点(m-1,n-2)再向下走一步，因此可以推出，f(m,n)=f(m-1,n)+f(m,n-1)，显然可以递归求解
循环实现代码，分析发现f(m,n)的子问题f(m-1,n)和f(m,n-1)在分解为更小的子问题时存在重复，因此可以把前面计算得到的f(m-1,n)和f(m,n-1)的结果保存起来，
这里需要使用一个二维数组来保存前面每次计算得到的结果，其中数组的第一行和第一列的元素值都是1

class Solution {
public:
    int uniquePaths(int m, int n) {
        if(m <= 0 || n <= 0)
            return 0;
        if(m == 1)
            return 1;
        if(n == 1)
            return 1;
        
        /* 注意二维vector初始化的方式 */
        vector<vector<int>> path_num(n, vector<int>(m, 0));
        for(int i = 0; i < m; ++i)
            path_num[0][i] = 1;
        for(int j = 1; j < n; ++j)
            path_num[j][0] = 1;
        for(int i = 1; i < m; ++i) {
            for(int j = 1; j < n; ++j) {
                path_num[j][i] = path_num[j-1][i] + path_num[j][i-1];
            }
        }
        
        return path_num[n-1][m-1];
    }
};
