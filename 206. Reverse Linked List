三种解法：
第一种直接遍历链表，同时利用三个变量分别保存当前节点、当前节点的前一个节点以及当前节点的后一个节点，非常直观
第二种首先依次将链表的各个节点入栈，然后在出栈的时候进行反转，也比较直观
第三种利用递归求解
这里，简单解释下递归解法：
1->2->3->4->5->NULL反转的结果是5->4->3->2->1->NULL，而1->2->3->4->NULL反转的结果是4->3->2->1->NULL，
所以求1->2->3->4->5->NULL的反转，可以先求1->2->3->4->NULL的反转，再在1->2->3->4->5->NULL的尾节点后面链接1->2->3->4->NULL的反转，依次递归求解。
递归的终止条件是链表只有一个节点，此时直接将头节点的next指针置为nullptr即可。
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    /* Reverse a linked list iteratively */
    ListNode* reverseList(ListNode* head) {
        if(head == nullptr)
            return nullptr;
        
        ListNode* current = head;
        ListNode* prev = nullptr;
        ListNode* next = nullptr;
        while(current != nullptr) {
            next = current->next;
            current->next = prev;
            prev = current;
            current = next;
        }
        
        return prev;
    }
    
    /* Reverse a linked list using a stack */
    ListNode* reverseList(ListNode* head) {
        if(head == nullptr)
            return nullptr;
        
        stack<ListNode*> stack_lnode;
        ListNode* node = head;
        while(node != nullptr) {
            stack_lnode.push(node);
            node = node->next;
        }
        
        ListNode* tail = stack_lnode.top();
        stack_lnode.pop();
        ListNode* prev = tail;
        while(!stack_lnode.empty()) {
            ListNode* current = stack_lnode.top();
            stack_lnode.pop();
            prev->next = current;
            prev = current;
        }
        prev->next = nullptr;
        
        return tail;
    }
    
    /* Reverse a linked list recursively */
    ListNode* reverseList(ListNode* head) {
        if(head == nullptr)
            return nullptr;
        
        ListNode* node = head;
        int len = 1;
        while(node->next != nullptr) {
            node = node->next;
            ++len;
        }
        
        return reverseListCore(head, len);
    }
    
    ListNode* reverseListCore(ListNode* head, int len) {
        if(len == 1) {
            head->next = nullptr;
            return head;
        }
            
        ListNode* tail = head;
        for(int i = 1; i < len; ++i) {
            tail = tail->next;
        }
        tail->next = reverseListCore(head, len-1);
        
        return tail;
    }    
};
