思路：可以把序列看成两部分，第一部分是它的第一个元素，第二部分是第一个元素后面所有的元素。求序列的全排列，可以分成两步。
第一步求所有可能出现在第一个位置的元素（把第一个元素和后面所有的元素分别进行交换），第二步固定第一个元素并递归地求后面所有的元素组成的序列的全排列，
详细解答参见剑指offer面试题38的分析过程。

class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> permutations;  
        if(nums.size() > 0)
            permuteCore(nums, 0, permutations);
        return permutations;
    }
    
    void permuteCore(vector<int>& nums, int start, vector<vector<int>>& permutations) {
        if(start == nums.size())
            permutations.push_back(nums);
        else {
            for(int index = start; index < nums.size(); ++index) {
                int temp = nums[index];
                nums[index] = nums[start];
                nums[start] = temp;
                
                permuteCore(nums, start+1, permutations);
                
                temp = nums[index];
                nums[index] = nums[start];
                nums[start] = temp;
            }
        }
    }
};
